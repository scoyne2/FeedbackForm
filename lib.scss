@function pi() {
	@return 3.14159265359;
}

@mixin offset-from($loc) {
	@if $loc == self {
		position: relative;
	} @else if $loc == ancestor {
		position: absolute;
	} @else if $loc == auto {
		position: static;
	} @else if $loc == window {
		position: fixed;
	}
}

@mixin gradient-bg($start, $stop) {
	background: linear-gradient(0deg, $start 0%, $stop 100%);
}

@mixin text-outline($color, $width: 1px, $maxIter: 3) {
	$tmp: (0 0 $width $color);
	$val: ();
	$val: append($val, $tmp, 'comma');
	@for $i from 1 through $maxIter {
		$val: append($val, $tmp, 'comma');
	}
	text-shadow: $val;
}

@mixin plain-rotate($theta) {
	$rads: $theta * (pi() / 180);
	$ct: cos($rads);
	$st: sin($rads);
	transform: rotateZ($theta * 1deg);
}


/*
plain-rotate(theta) {
	rads = theta * ($pi / 180)
	ct = cos(rads)
	st = sin(rads)
	transform rotateZ((theta)deg)
}

truncate(val, prec = 0)
	unless prec < 0
		return (floor(val * 10 * prec) / (prec * 10))
	return (ceil(val * 10 * prec) / (prec * 10))

outline(w = 1px, style = solid, color = green)
	outline w style color

hex(num)
	return base-convert(round(num), 16)

//convert to Microsofts filter format
argb(color)
	return s('#%s%s%s%s', hex(alpha(color) * 255), hex(red(color)), hex(green(color)), hex(blue(color)))

normalize-brightness(val, scale, max = 255)
	return ((val / max) * (scale / 1000))

brightness-vector(color)
	return normalize-brightness(red(color), 299) + normalize-brightness(green(color), 587) + normalize-brightness(blue(color), 114)

//takes a sample and two colors (defaulting to black and white)
//will select the color that contrasts most with the sample and return it
contrast(sample, color1 = black, color2 = white)
	sVec = brightness-vector(sample)
	cVec1 = abs(sVec - brightness-vector(color1))
	cVec2 = abs(sVec - brightness-vector(color2))
	return (cVec1 >= cVec2) ? color1 : color2

//takes a sample and two colors (defaulting to black and white)
//will select the color that contrasts least with the sample and return it
contrast-invert(sample, color1 = black, color2 = white)
	sVec = brightness-vector(sample)
	cVec1 = abs(sVec - brightness-vector(color1))
	cVec2 = abs(sVec - brightness-vector(color2))
	return (cVec1 < cVec2) ? color1 : color2

darken-or-lighten(sample, amount)
	sVec = brightness-vector(sample)
	if sVec > 0.5
		return darken(sample, amount)
	else
		return lighten(sample, amount)

//because the !important keyword seems to trip up the parser
important()
	return s('%s !important', arguments)


gradient-bg()
	start = shift(arguments)
	stop = shift(arguments)
	if start is a 'color' and stop is a 'color'
		mixed = mix(start, stop, 50)
		background mixed
		background s('linear-gradient(0deg, %s 0%, %s 100%)', rgba(start), rgba(stop))
		ms-gradient(start, stop)
	else if start == none
		background-image none
		filter none

preserve-aspect-ratio()
	width auto
	height auto

//quickly constrain (images for example) to the width and height of a parent element
scale-to-parent(mw = 100%, mh = 100%)
	max-width mw
	max-height mh
	preserve-aspect-ratio()

text-stroke(color = apply-alpha(contrast(@color), 50%))
	text-shadow 1px 1px 0 color, 1px -1px 0 color, -1px 1px 0 color, -1px -1px 0 color, 1px 0 0 color, 0 1px 0 color, -1px 0 0 color, 0 -1px 0 color, 0 0 4px color

//so that we can easily apply alternate arithmetic if we choose
font-size(pxls)
	font-size pxls * 1px//(round(pxls / 13 * 1000) / 1000)%

bold()
	font-weight 700

not-bold()
	font-weight 400

underline()
	text-decoration underline

no-underline()
	text-decoration none

italic()
	font-style italic

box-reset()
	margin 0
	padding 0
	border 0

uppercase()
	text-transform uppercase

lowercase()
	text-transform lowercase

hwaccel()
	transform translateZ(0)

block-center(vert = 0)
	margin vert auto

path(image)
	return unquote("url('../images/" + image + "')")

bg(image)
	if image == none
		background-image none
	else
		background-image path(image)

bg-image()
	background-image arguments

bg-color()
	background-color arguments

bg-repeat(rpt)
	if rpt == x
		background-repeat repeat-x
	else if rpt == y
		background-repeat repeat-y
	else if rpt == both
		background-repeat repeat
	else
		background-repeat no-repeat

bg-pos()
	background-position arguments

bg-fixed()
	background-attachment fixed

bg-scroll()
	background-attachment scroll

offset-origin()
	position relative

remove()
	display none

clip-box()
	overflow hidden

hide(using = false)
	unless using
		visibility hidden
	if using == using-opacity
		opacity 0
	if using == using-offset
		offset-from(window)
		left -100%
		top -100%
		width 1px
		height 1px
		clip-box()

//apply to html (selector) to skeletonize the page.
reveal()
	*
		background-image important(none)
		background-color important(rgba(0, 0, 0, 0.05))
		//ms-gradient(rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05))
		outline important(1px solid rgb(255, 0, 0))
		outline important(1px solid rgba(255, 0, 0, 0.05))
		color important(rgba(0, 0, 0, 0.5))

	img
	input
		opacity important(0.5)

clear-floating-children(using = false)
	unless using
		overflow hidden
	if using == "using-overflow"
		overflow hidden
	if using == "using-after"
		&:after
			content ' '
			display block
			height 0
			visibility hidden
			clear both

separate-margins(using = false)
	unless using
		overflow hidden
	if using == "using-border"
		border 1px solid transparent
	if using == "using-padding"
		padding 1px
	if using == "using-overflow"
		overflow hidden

apply-alpha(sample, alpha = 50%)
	return rgba(red(sample), green(sample), blue(sample), alpha)

text-outline(width = 1px, maxIter = 3, color = apply-alpha(contrast(@color), 50%))
	val = '0 0 ' + width + ' ' + color
	for i in 2 .. maxIter
		val = val + ', 0 0 ' + width + ' ' + rgba(color)
	text-shadow(unquote(val))

*/
